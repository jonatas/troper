h1. Lista de tarefas geral

# Documentação
## Introdução ao sistema
### Descrição geral da ferramenta
### Revisão geral das partes do passo a passo
### Filtros
### Colunas
### Fonte de dados
## Executar relatório
#
h1. Gerando relatório na web:

h2. O velho terror dos programadores

Como sempre, odiado pelos suportes, fazer relatório é algo realmente muito chato.

h2. Sistema para construir relatórios na web. 

Criar uma interface onde possa ser indicado uma consulta, e apartir desta consulta permitir a edição do leiaute para impressão da consulta. Neste leiaute deve ser possível:
Em todas as templates, será possível não alterar nada, e simplesmente sujerir todo o leiaute.

# Editar cabeçalho
## Trocar título
## Imprimir filtros e parametros externos

# Editar a banda da consulta
## Sobrescrever qualquer coluna, e mesmo alterar o html da banda
## Adicionar colunas virtuais

# Editar a banda do rodapé
## Adicionar filtros de agregação como [sum, count]
## Modificar os dados do rodapé

h2. Quanto a interface do sistema

No planejamento da interface do sistema, o sistema espera tratar diretamente com a experiência do usuário para a construção e manutenção de um relatório. Fazer uma determinada tarefa repetitivamente leva um aperfeiçoamento dos métodos de interagir com o sistema. 

Para construir uma interface inteligente, é necessário a colaboração de no mínimo um usuário. A experiência na execução das tarefas esperadas pelo sistema precisam ser de domínio desta pessoa e o feedback constante ajuda na ergonomia do produto.

h3. exemplo de um novo relatório:

* Escolher a consulta que contém os dados do relatório
** Neste momento deve ser inteligente para buscar as consultas pre-definidas/tabelas do bd
* Mostrar as colunas 
** Exibe as colunas e a marcação para selecionar se vai aparecer no relatório ou não
** Exibe atributos da coluna com suas inicializações default
* Permitir editar as colunas existentes
* Permitir adicionar novas colunas
* Adicionar um cabeçalho
* Adicionar um rodapé

h3. escolha a query inicial:

|. Escolha uma consulta |
| clientes |
| clientes_validos |
| enderecos | 

* escolhida a consulta inicial de **clientes**, estarão disponíveis os campos do cliente e seus relacionamentos para inclusão:

|. clientes|
| [ ] id|
| [x] nome|
| [x] telefone|
| [x] email|
| [x] endereco_id [+]|

  
Com a query em mãos vou deduzir as colunas do relatório:

<pre>

  +---------------------+ 
  | query: [ cliente ]
  +---------------------+
  | [ ] id 
  | [x] nome
  | [x] telefone 
  | [x] email
  | [x] endereco_id [+]
  +---------------------+

</pre>

deve observar os relacionamentos como padrão active_record, dando a opcão de habilitar os outros campos do relatorio:

**query cliente**
# [ ] id 
# [x] nome
# [x] telefone 
# [x] email
# [x] endereco_id [-]
## [x] rua
## [x] numero 
## [x] complemento
## [x] cidade 


deve dar a possibilidade de adicionar os relacionamentos indo para o próximo passo da organização das colunas.


|_. Colunas com propriedades |
| [x] colunas       |  label      |
| [x] nome          | Nome        |
| [x] email         | Email       |
| [x] telefone      | Fone        |
| [x] rua           | Rua         |
| [x] numero        | Número      |
| [x] complemento   | Complemento |
| [x] cidade        | Cidade      |


melhorando o exemplo com a coluna de sobrescrever a escrita dos elementos default:


|_. Colunas com mais propriedades |
| [X] COLUNAS       |  LABEL      | SUBSTITUIR |
| [x] nome          | Nome        | |
| [x] email         | Email       | **mail_to cliente.email** |
| [x] telefone      | Fone        | cliente.email.formata :telefone |
| [x] endereco      | Endereço    | cliente.endereco.rua + ' nr '+ |
|                   |             | cliente.endereco.numero + ', '+ |
|                   |             | cliente.endereco.complemento   |

h2. Filtros do relatório: 

A filtragem de dados faz parte da construção do relatório e deve ser declarada após a seleção das colunas, dando opção de adicionar uma condição para um filtro, e uma interface para sujerir o mesmo filtro.
Cada filtro poderá fazer parte da condição sql, e terá uma sujestão para a consulta quando for baseado em uma coluna. 

Um filtro baseado em uma coluna pode deduzir:

* o **nome do label** usando o nome e tipo do filtro
** ex: Nascimento entre

* o **tipo do componente** usado na tela apartir do tipo da coluna. exemplos:
** calendário
** campo texto
** número
** auto completar

* o **operador do filtro** tipo sql
** igual (=)
** maior igual (>=)
** menor igual (<=)
** parecido (like '%%')
** entre valores (between)
** lista de valores (in(values...))

* o **operador do filtro** tipo personalizado, executa em tempo real
** lambda { | cliente | cliente.cidade =~ /beltrao/ }

<pre syntax='ruby'>
calendario(nascimento_de) + ' até ' + calendario(nascimento_ate)
</pre>

* a **condição sql** ou **lambda** para execução enquanto estiver imprimindo

<pre syntax='ruby'>
# usando condicao sql 

"clientes.nascimento between :nascimento_de and :nascimento_ate"

# usando uma validacao enquanto imprimindo

inicio, fim = filtro(nascimento_de).to_date, filtro(nascimento_ate).to_date
lambda { |cliente| inicio..fim.include?(cliente.data_aniversario) }
</pre>


|_. Adicionar um filtro |
| Nome filtro                | Quando                          | Visualizar como    |
| Aniversário entre | entre  | "clientes.nascimento betwee"... | calendario(nascimento_de) + ' até '.. |

